clear; clc; clf;
delete(findall(0,'Type','figure'))

%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: /Users/leonardo/Google Drive/PhD/MATLAB/Research/dpc_regioni.csv
%
% Auto-generated by MATLAB on 16-Aug-2020 16:02:02

% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 21);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "ricoverati_con_sintomi", "terapia_intensiva", "totale_ospedalizzati", "isolamento_domiciliare", "totale_positivi", "variazione_totale_positivi", "nuovi_positivi", "dimessi_guariti", "deceduti", "casi_da_sospetto_diagnostico", "casi_da_screening", "totale_casi", "tamponi", "casi_testati", "Var21"];
opts.SelectedVariableNames = ["ricoverati_con_sintomi", "terapia_intensiva", "totale_ospedalizzati", "isolamento_domiciliare", "totale_positivi", "variazione_totale_positivi", "nuovi_positivi", "dimessi_guariti", "deceduti", "casi_da_sospetto_diagnostico", "casi_da_screening", "totale_casi", "tamponi", "casi_testati"];
opts.VariableTypes = ["string", "string", "string", "string", "string", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "string", "double", "double", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "casi_da_sospetto_diagnostico", "casi_da_screening", "casi_testati", "Var21"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "casi_da_sospetto_diagnostico", "casi_da_screening", "casi_testati", "Var21"], "EmptyFieldRule", "auto");

% Import the data
dpcregioni = readtable("/Users/leonardostella/Google Drive/PhD/MATLAB/Research/COVID-19 SIAM/dpc_regioni.csv", opts);

% Clear temporary variables
clear opts


%% Data per region
symptomatic_hospitalized = zeros(21,225);
asymptomatic_isolated = zeros(21,225);
new_infected = zeros(21,225);

cumulative_infected = zeros(21,225);
cumulative_recovered = zeros(21,225);
cumulative_deaths = zeros(21,225);

tot_positive = zeros(21,225);
var_tot_positive = zeros(21,225);
for k = 1:21
    symptomatic_hospitalized(k,:) = table2array(dpcregioni(k:21:4724+k,3));
    asymptomatic_isolated(k,:) = table2array(dpcregioni(k:21:4724+k,4));
    new_infected(k,:) = table2array(dpcregioni(k:21:4724+k,7));
    
    cumulative_infected(k,:) = table2array(dpcregioni(k:21:4724+k,12));
    cumulative_recovered(k,:) = table2array(dpcregioni(k:21:4724+k,8));
    cumulative_deaths(k,:) = table2array(dpcregioni(k:21:4724+k,9));
    
    tot_positive(k,:) = table2array(dpcregioni(k:21:4724+k,5));
    var_tot_positive(k,:) = table2array(dpcregioni(k:21:4724+k,6));
end

%%  Parameters and WS complex network
% setting general parameters for simulations
T = 270; dt = 1; % time horizon & time step 220 days is until 30 September
gamma = 0.499522798579201676; lambda = 0.59952; % gamma and lambda in SAIR
sigma = 0.05050505235642550742; mu = 0.1504; % sigma and mu in SAIR
alpha = 0.03351722405987804617;% alpha in SAIR

N = 60*10^6;


% Ab,Ba,Cal,Cam,Em,Fr,La,Li,Lo,Ma,Mo,PAB,PAT,Pi,Pu,Sa,Si,To,Um,VA,Ve
k_measure = [38 12 10 14 90 40 ...
    19 86 104 56 23 66 ...
    99 88 18 13 9 45 24 110 65]; 
%k_measure = k_measure./110;
m = 18; 
K = length(k_measure);

%k_measure = 20.*ones(1,21); % Test same distribution

% Population:
% Ab,Ba,Cal,Cam,Em,Fr,La,Li,Lo,Ma,Mo,PAB,PAT,Pi,Pu,Sa,Si,To,Um,VA,Ve
k_classes = [0.022 0.009 0.032 0.096 0.073 0.02 0.098 0.026 0.166 0.025 0.005 0.009 0.009 0.072 0.068 0.027 0.083 0.062 0.015 0.002 0.081];
K = length(k_classes);
k_c = [0.022 0.009 0.032 0.096 0.073 0.02 0.098 0.026 0.166 0.025 0.005 0.009 0.009 0.072 0.068 0.027 0.083 0.062 0.015 0.002 0.081]';
regions = {'Abruzzo','Basilicata','Calabria','Campania','Emilia-Romagna','Friuli Venezia Giulia', ...
    'Lazio','Liguria','Lombardia','Marche','Molise','P.A. Bolzano','P.A. Trento', 'Piemonte', ...
    'Puglia','Sardegna','Sicilia','Toscana','Umbria',"Valle d'Aosta",'Veneto'}';

%k_classes = 1/21.*ones(1,21); % Test same distribution

psi_1 = k_measure./52.25;%[0.05 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.6 0.7];
psi_2 = (k_measure./52.25)*0.5;

psi1_init = psi_1;
psi2_init = psi_2;

%psi_1 = ones(K).*.99;%[0.62 0.35 0.35 0.42 0.97 0.60 0.58 0.98 0.99 0.58 0.55 0.56 0.56 0.92 0.61 0.64 0.83 0.62 0.55 0.65 0.98];
%psi_2 = psi_1.*0.6;%[0.022*7 0.009*7 0.032*7 0.096*7 0.85 0.02*7 0.098*7 0.65 0.95 0.5 0.005*7 0.009*7 0.009*7 0.072*7 0.068*7 0.027*7 0.083*7 0.062*7 0.015*7 0.002*7 0.081*7];

m = sum(k_measure(:).*k_classes(:));
R0 = zeros(k,T);

% Rt calculated
tot_positiveMM = zeros(k,225); var_tot_positiveMM = zeros(k,225);
KK = zeros(k,225); RTT = zeros(k,225); RTTM = zeros(1,225);
for t = 1:225
    for k = 1:21
        % Calculating the moving mean value   
        tot_positiveMM(k,t) = movmean(tot_positive(k,t),7);
        var_tot_positiveMM(k,t) = movmean(var_tot_positive(k,t),7);
        % KK=log((varMM+PositiviMM)./PositiviMM);
        KK(k,t) = log((var_tot_positiveMM(k,t)+tot_positiveMM(k,t))./tot_positiveMM(k,t));
        % RTT=exp(KK*7);
        RTT(k,t) = exp(KK(k,t)*5);
        
        RTTM(t) = RTTM(t) + RTT(k,t);
    end
    RTTM(t) = RTTM(t)/21;
end

% figure
% plot(RTT(9,:),'LineWidth',1.5); hold on;
% %plot(RTT(4,:),'LineWidth',1.5,'r'); 
% plot(RTTM,'LineWidth',2.5,'color',[0.2 0.5 0.9]);
% hold off;

%% DYNAMICS
S = zeros(K,T); A = zeros(K,T); I = zeros(K,T); R = zeros(K,T);
dS = zeros(K,T); dA = zeros(K,T); dI = zeros(K,T); dR = zeros(K,T);
dDR = zeros(K,T); % increment of diagnosed removed
Atot = zeros(K,T); Atot_strict = zeros(1,T);%Atot(1,1) = A(1,1); Atot(2,1) = A(2,1);
Itot = zeros(K,T); Itot_strict = zeros(1,T);%Itot(1,1) = I(1,1); Itot(2,1) = I(2,1);
%f = sigma.*ones(T,2);
for k=1:K    
    A(k,1) = asymptomatic_isolated(k,1)/(N*k_classes(k));
    I(k,1) = symptomatic_hospitalized(k,1)/(N*k_classes(k));
    %R(k,1) = (cumulative_deaths(k,160)/(N*k_classes(k))-cumulative_deaths(k,159)/(N*k_classes(k)))+(cumulative_recovered(k,160)/(N*k_classes(k))-cumulative_recovered(k,159)/(N*k_classes(k)));
    S(k,1) = 1 - A(k,1) - I(k,1) - R(k,1);
    Atot(k,1) = A(k,1); 
    Itot(k,1) = I(k,1); 
    R0(k,1) = (psi_1(k)*gamma*mu+psi_2(k)*lambda*alpha)/(((sigma+alpha)*mu));
end
Atot_strict(1) = A(4,1); Itot_strict(1) = I(4,1);

% initialising theta_1 and theta_2
theta_1 = zeros(1,T); theta_2 = zeros(1,T);
for k = 1:K
        Pk = k_measure(k)*k_classes(k);
    
        theta_1(1) = theta_1(1) + Pk*A(k,1);
        theta_2(1) = theta_2(1) + Pk*I(k,1);
end
theta_1(1) = theta_1(1)/(2*m);
theta_2(1) = theta_2(1)/(2*m);


for t = 2:T
    
    if t > 10 && t < 50
        psi_1 = psi_1 - psi_1*0.05140; 
        psi_2 = psi_2 - psi_2*0.1180;
        
        psi_1(4) = psi_1(4) - psi_1(4)*0.003540;
        psi_2(4) = psi_2(4) - psi_2(4)*0.001380;
        
        psi_1(9) = psi_1(9) + psi_1(9)*0.006540;
        psi_2(9) = psi_2(9) + psi_2(9)*0.001380;
        
        
    elseif t > 100 && t < 180
        psi_1(1) = psi_1(1) + psi_1(1)*0.006140;
        psi_2(1) = psi_2(1) + psi_2(1)*0.004380;
        
        if t < 165
            psi_1(2) = psi_1(2) + psi_1(2)*0.008940;
            psi_2(2) = psi_2(2) + psi_2(2)*0.008380;
        else
            psi_1(2) = psi_1(2) + psi_1(2)*0.118940;
            psi_2(2) = psi_2(2) + psi_2(2)*0.008380;
        end
        
        if t < 155
            psi_1(3) = psi_1(3) + psi_1(3)*0.006940;
            psi_2(3) = psi_2(3) + psi_2(3)*0.003380;
        else
            psi_1(3) = psi_1(3) + psi_1(3)*0.036940;
            psi_2(3) = psi_2(3) + psi_2(3)*0.008380;
        end
        
        if t < 165
            psi_1(4) = psi_1(4) + psi_1(4)*0.005980;
            psi_2(4) = psi_2(4) + psi_2(4)*0.003380;
        else
            psi_1(4) = psi_1(4) + psi_1(4)*0.185940;
            psi_2(4) = psi_2(4) + psi_2(4)*0.008380;
        end
        
        psi_1(5) = psi_1(5) + psi_1(5)*0.006940;
        psi_2(5) = psi_2(5) + psi_2(5)*0.004380;
        
        psi_1(6) = psi_1(6) + psi_1(6)*0.004940;
        psi_2(6) = psi_2(6) + psi_2(6)*0.008380;
        
        if t < 160
            psi_1(7) = psi_1(7) + psi_1(7)*0.002940;
            psi_2(7) = psi_2(7) + psi_2(7)*0.000380;
        else
            psi_1(7) = psi_1(7) + psi_1(7)*0.122940;
            psi_2(7) = psi_2(7) + psi_2(7)*0.008380;
        end
        
        psi_1(8) = psi_1(8) + psi_1(8)*0.010940;
        psi_2(8) = psi_2(8) + psi_2(8)*0.002380;
        
        psi_1(9) = psi_1(9) + psi_1(9)*0.006540;
        psi_2(9) = psi_2(9) + psi_2(9)*0.002380;
        
        psi_1(10) = psi_1(10) + psi_1(10)*0.010940;
        psi_2(10) = psi_2(10) + psi_2(10)*0.008380;
        
        psi_1(11) = psi_1(11) + psi_1(11)*0.010940;
        psi_2(11) = psi_2(11) + psi_2(11)*0.008380;
        
        psi_1(12) = psi_1(12) + psi_1(12)*0.010940;
        psi_2(12) = psi_2(12) + psi_2(12)*0.008380;
        
        psi_1(13) = psi_1(13) + psi_1(13)*0.012540;
        psi_2(13) = psi_2(13) + psi_2(13)*0.008380;
        
        psi_1(14) = psi_1(14) + psi_1(14)*0.008940;
        psi_2(14) = psi_2(14) + psi_2(14)*0.005380;
        
        psi_1(15) = psi_1(15) + psi_1(15)*0.012940;
        psi_2(15) = psi_2(15) + psi_2(15)*0.008380;
        
        if t < 150
            psi_1(16) = psi_1(16) + psi_1(16)*0.010940;
            psi_2(16) = psi_2(16) + psi_2(16)*0.008380;
        else
            psi_1(16) = psi_1(16) + psi_1(16)*0.080940;
            psi_2(16) = psi_2(16) + psi_2(16)*0.008380;
        end
        
        if t < 150
            psi_1(17) = psi_1(17) + psi_1(17)*0.010940;
            psi_2(17) = psi_2(17) + psi_2(17)*0.008380;
        else
            psi_1(17) = psi_1(17) + psi_1(17)*0.070940;
            psi_2(17) = psi_2(17) + psi_2(17)*0.008380;
        end
        
        psi_1(18) = psi_1(18) + psi_1(18)*0.010940;
        psi_2(18) = psi_2(18) + psi_2(18)*0.008380;
        
        psi_1(19) = psi_1(19) + psi_1(19)*0.010940;
        psi_2(19) = psi_2(19) + psi_2(19)*0.008380;
        
        psi_1(20) = psi_1(20) + psi_1(20)*0.010940;
        psi_2(20) = psi_2(20) + psi_2(20)*0.008380;
        
        psi_1(21) = psi_1(21) + psi_1(21)*0.010940;
        psi_2(21) = psi_2(21) + psi_2(21)*0.008380;
  
    elseif t >= 170 && t < 170
        psi_1 = psi_1 + psi_1*0.005940; 
        psi_2 = psi_2 + psi_2*0.003380;
    end
    
    for k = 1:K
        
        dS(k,t) = (-S(k,t-1)*(psi_1(k)*gamma*theta_1(t-1) + psi_2(k)*lambda*theta_2(t-1)))*dt;
        dA(k,t) = (S(k,t-1)*(psi_1(k)*gamma*theta_1(t-1) + psi_2(k)*lambda*theta_2(t-1))-A(k,t-1)*(sigma+alpha))*dt;
        dI(k,t) = (alpha*A(k,t-1)-mu*I(k,t-1))*dt;
        
        if k == 4
            psi_1_strict = psi_1(k);
            psi_2_strict = psi_2(k);
            if t > 100
                psi_1_strict = psi_1(k) - psi_1(k)*0.35940; 
                psi_2_strict = psi_2(k) - psi_2(k)*0.3080;
            end
            
            dS_strict = (-S(k,t-1)*(psi_1_strict*gamma*theta_1(t-1) + psi_2_strict*lambda*theta_2(t-1)))*dt;
            dA_strict = (S(k,t-1)*(psi_1_strict*gamma*theta_1(t-1) + psi_2_strict*lambda*theta_2(t-1))-A(k,t-1)*(sigma+alpha))*dt;
            dI_strict = (alpha*A(k,t-1)-mu*I(k,t-1))*dt;
            
            Atot_strict(t) = Atot_strict(t-1) - dS_strict;
            Itot_strict(t) = Itot_strict(t-1) + alpha*A(k,t-1)*dt;
        end

        %dDR(t) = (mu*I(k,t-1))*dt;

        S(k,t) = S(k,t-1) + dS(k,t);
        A(k,t) = A(k,t-1) + dA(k,t);
        I(k,t) = I(k,t-1) + dI(k,t);
        
        Atot(k,t) = Atot(k,t-1) - dS(k,t);
        Itot(k,t) = Itot(k,t-1) + alpha*A(k,t-1)*dt;

        %dR(t) = S(t) + A(t) + I(t);
        R(k,t) = 1 - S(k,t) - A(k,t) - I(k,t);
        
        R0(k,t) = (psi_1(k)*gamma*mu+psi_2(k)*lambda*alpha)/(((sigma+alpha)*mu));
        
        % calculating theta_1 and theta_2
        
        Pk = k_measure(k)*k_classes(k);
    
        theta_1(t) = theta_1(t) + Pk*A(k,t);
        theta_2(t) = theta_2(t) + Pk*I(k,t);

    end
    theta_1(t) = theta_1(t)/(2*m);
    theta_2(t) = theta_2(t)/(2*m);
    
%     if t > 10
%         psi_1 = psi_1-(psi_1.*0.005); psi_2 = psi_2-(psi_2.*0.00135);
%     end
end


% syms x1 x2 x3 g l s m
% [Sx1,Sx2,Sx3] = solve(-x1*(g*x2+l*x3) == 0, g*x1*x2 - s*x2 == 0, l*x1*x3 - m*x3 ==0)

% syms t1 t2 k1 k2 g l s m a
% X = [-k1*gamma*t1-k2*lambda*t2 0 0 0;
%     -k1*gamma*t1-k2*lambda*t2 -alpha-sigma 0 0;
%     0 alpha -mu 0;
%     0 sigma mu 0];
% det(X)



%% Calculation of Itilde
tbar = 1; % The instant where parameters do not change anymore
S0 = S(:,tbar); A0 = A(:,tbar); I0 = I(:,tbar); % Initial conditions at tbar
Sbar = S0.*0.9999; R0k = R0(:,tbar);

SS = Sbar; % Calculating parts of equation (3.16)
nP = zeros(1,21); lm = zeros(21,1);
for k=1:K
    nP(k) = k_measure(k)*k_classes(k)/m;
    if tbar == 1
        lm(k) = (psi2_init(k)*lambda)/(mu);
    else
        lm(k) = (psi_2(k)*lambda)/(mu);
    end
end

for i=1:1000 % Fixed point for (3.16)
    logS = R0k*nP*(S0-SS) + R0k*nP*A0 + lm*nP*I0;
    SS = exp(-logS).*S0;
end

% Calculating Itilde
Itilde = ones(21,1).*0.9999; Zk = zeros(21,1);
SI = zeros(21,1); Sm = 1/(SS*m);


for i=1:2000 % Fixed point for equations (3.20)-(3.21)
    for k=1:K % Calculating the second half of equation (3.21)
        if tbar == 1
            SI(k) = SS(k)*(psi1_init(k)*gamma + psi2_init(k)*lambda*Itilde(k));
        else
            SI(k) = SS(k)*(psi_1(k)*gamma + psi_2(k)*lambda*Itilde(k));
        end
    end
    
    Zk = Sm*(nP*SI); % Equation (3.21)
    
    for k=1:K % Calculating equation (3.20)
        Itilde(k) = alpha/(mu - SS(k)*(alpha+sigma) + SS(k)*Zk(k));
    end
end

cond = nP*diag(SS)*R0k;








% fig = figure('Renderer', 'painters', 'Position', [10 10 1200 1000]);
% 
% titles = ['Abruzzo','Basilicata','Calabria','Campania','Emilia-Romagna','Friuli-Venezia Giulia', ...
%     'Lazio','Liguria','Lombardy','Marche','Molise','A.P. Bolzano','A.P. Trento', 'Piedmont', ...
%     'Apulia','Sardinia','Sicily','Tuscany','Umbria',"Aosta Valley",'Veneto'];
% 
% t = datetime(2020,2,24) + caldays(0:T-1);
% colormap hsv(21)
% jetcustom = hsv(21);
% % Ab,Ba,Cal,Cam,Em,Fr,La,Li,Lo,Ma,Mo,PAB,PAT,Pi,Pu,Sa,Si,To,Um,VA,Ve
% for k = 1:K
%     subplot(7,3,k)
%     %plot(t(1:T),Itot(k,1:T).*pop(1),'-','color',[0.2 0.5 0.9][0.69 0.3 0.69],'LineWidth',3); hold on;
%     %plot(t(1:T),Atot(k,1:T).*pop(1),'-','color',[0.56 0.86 0.36],'LineWidth',3);
%     plot(t(1:T),Atot(k,1:T).*(N*k_classes(k))+Itot(k,1:T).*(N*k_classes(k)),'-','Color',jetcustom(k,:),'LineWidth',2); hold on;
%     plot(t(1:225),cumulative_infected(k,:),'-.','Color',[0.8 0 0.8],'LineWidth',1.5);
%     total = round(1.2*(Atot(k,T).*(N*k_classes(k))+Itot(k,T).*(N*k_classes(k))));
%     % Fitting the seroprevalence data with exponential
% %     x=(1:T)';
% %     y=(cumulative_infected.*6);
% %     g = fittype('a-b*exp(-c*x)');
% %     f0 = fit(x,y,g,'StartPoint',[[ones(size(x)), -exp(-x)]\y; 1]);
% %     xx = linspace(1,T,T);
% %plot(t(1:T),f0(xx),'-.','color',[0.99 0.3 0.3],'LineWidth',2); hold on;
%     xl = xline(datetime(2020,3,9),'--','color','black','LineWidth',2);
%     %xl.LabelVerticalAlignment = 'middle';
%     %xl.LabelHorizontalAlignment = 'center';
%     %xl.FontSize = 14;
%     %plot(1:T,confirmed_hubei,'r:^');
%     xlim([datetime(2020,2,24) datetime(2020,11,30)]);
%     ylim([0 total]);
%     ax = gca;
%     ax.YAxis.TickValues = 0:round(total/3):total;
%     set(gca,'FontSize',14,'DefaultTextFontSize',14);
%     %xlabel('Date','FontSize',16);
%     %ylabel('# cases','FontSize',16);
%     title(titles(k),'FontSize',12);
%     grid on;
% end
% h = legend('Model: Total Infected','Data\_Cumulative\_Infected');
% 
% han=axes(fig,'visible','off'); 
% han.Title.Visible='on';
% han.XLabel.Visible='on';
% han.YLabel.Visible='on';
% yL=ylabel(han,'Number of cases','FontSize',16);
% set(yL,'Position', [-0.05 0.5]);
% xlabel(han,'Date','FontSize',16);
% title(han,'Cumulative Infected per Region: CN Model vs Data','FontSize',18);
% %xtickangle(45);
% %xtickformat('MMM-dd');
% %set(gca,'XTick', 1:size(t),'XTickLabel',t,'FontSize',14);
% %ax = gca;
% %ax.XAxis.TickValues = t(1:28:T);
% %set(gca,'DefaultTextFontSize',14);
% % AxesH    = findobj(FigH, 'Type', 'Axes');
% % YLabelHC = get(AxesH, 'YLabel');
% % YLabelH  = [YLabelHC{:}];
% % set(YLabelH, 'String', 'Number of cases')
% %YLabelH  = [YLabelHC{:}];
% %h_label=ylabel('test','visible','on');
% hold off;
% 
% %% SEROPREVALENCE
% figure
% 
% % Fitting the seroprevalence data with exponential
% k = 4; % Campania
% % Calculating the multiplier: x8
% % (N*k_classes(k))*0.007
% % cumulative_infected(k,172)
% x=(1:225)';
% y=(cumulative_infected(k,:).*8)';
% g = fittype('a-b*exp(-c*x)');
% f0 = fit(x,y,g,'StartPoint',[[ones(size(x)), -exp(-x)]\y; 1]);
% xx = linspace(1,T,T);
% 
% % Creating the actual plot
% t = datetime(2020,2,24) + caldays(0:T-1);
% plot(t(1:T),Atot(k,1:T).*(N*k_classes(k))+Itot(k,1:T).*(N*k_classes(k)),':','color',[0.69 0.3 0.69],'LineWidth',3); hold on;
% %plot(t(1:T),Atot_strict(1:T).*(N*k_classes(k))+Itot_strict(1:T).*(N*k_classes(k)),'-','color',[0.56 0.86 0.36],'LineWidth',2);
% stem(t(1:225),cumulative_infected(k,:),'color',[0.69 0.3 0.69]);
% %plot(t(1:T),f0(xx),'-.','color',[0.99 0.3 0.3],'LineWidth',2);
% xl = xline(datetime(2020,3,9),'-.','Lockdown','color','black','LineWidth',2);
% xl.LabelVerticalAlignment = 'middle';
% xl.LabelHorizontalAlignment = 'center';
% xl.FontSize = 14;
% %plot(1:T,confirmed_hubei,'r:^');
% xlim([datetime(2020,2,24) datetime(2020,11,15)]);
% ylim([0 4*10^4]);
% xtickangle(45);
% xtickformat('MMM-dd');
% %set(gca,'XTick', 1:size(t),'XTickLabel',t,'FontSize',14);
% set(gca,'FontSize',14);
% ax = gca;
% ax.XAxis.TickValues = t(1:14:T);
% title('Impact of Tourism in Campania');
% xlabel('Date','FontSize',16);
% ylabel('Number of cases','FontSize',16);
% set(gca,'DefaultTextFontSize',14);
% h = legend('Model: Total Infected','Data\_Cumulative\_Infected','Location','northwest');
% grid on;
% % Creating a subplot inside
% axes('Position',[.7 .71 .2 .2])
% box on
% plot(t(1:225),RTT(k,1:225),'-','color',[0.2 0.5 0.9],'LineWidth',1.5);
% xlim([datetime(2020,3,10) datetime(2020,10,8)]);
% ylim([0 3]);
% ax = gca;
% ax.YAxis.TickValues = [0 1 2 3];
% xlabel('Date','FontSize',12);
% ylabel('R_t','FontSize',12);
% grid on; hold off;
% 
% figure
% 
% % Fitting the seroprevalence data with exponential
% k = 9; % Lombardia
% % Calculating the multiplier: x8
% % (N*k_classes(k))*0.007
% % cumulative_infected(k,172)
% x=(1:225)';
% y=(cumulative_infected(k,:).*8)';
% g = fittype('a-b*exp(-c*x)');
% f0 = fit(x,y,g,'StartPoint',[[ones(size(x)), -exp(-x)]\y; 1]);
% xx = linspace(1,T,T);
% 
% % Creating the actual plot
% t = datetime(2020,2,24) + caldays(0:T-1);
% plot(t(1:T),Atot(k,1:T).*(N*k_classes(k))+Itot(k,1:T).*(N*k_classes(k)),':','color',[0.69 0.3 0.69],'LineWidth',3); hold on;
% %plot(t(1:T),Atot_strict(1:T).*(N*k_classes(k))+Itot_strict(1:T).*(N*k_classes(k)),'-','color',[0.56 0.86 0.36],'LineWidth',2);
% stem(t(1:225),cumulative_infected(k,:),'color',[0.69 0.3 0.69]);
% %plot(t(1:T),f0(xx),'-.','color',[0.99 0.3 0.3],'LineWidth',2);
% xl = xline(datetime(2020,3,9),'-.','Lockdown','color','black','LineWidth',2);
% xl.LabelVerticalAlignment = 'middle';
% xl.LabelHorizontalAlignment = 'center';
% xl.FontSize = 14;
% %plot(1:T,confirmed_hubei,'r:^');
% xlim([datetime(2020,2,24) datetime(2020,11,15)]);
% ylim([0 4*10^5]);
% xtickangle(45);
% xtickformat('MMM-dd');
% %set(gca,'XTick', 1:size(t),'XTickLabel',t,'FontSize',14);
% set(gca,'FontSize',14);
% ax = gca;
% ax.XAxis.TickValues = t(1:14:T);
% title('Impact of Tourism in Lombardy');
% xlabel('Date','FontSize',16);
% ylabel('Number of cases','FontSize',16);
% set(gca,'DefaultTextFontSize',14);
% h = legend('Model: Total Infected','Data\_Cumulative\_Infected','Location','northwest');
% grid on;
% % Creating a subplot inside
% axes('Position',[.7 .71 .2 .2])
% box on
% plot(t(1:225),RTT(k,1:225),'-','color',[0.2 0.5 0.9],'LineWidth',1.5);
% xlim([datetime(2020,3,10) datetime(2020,10,8)]);
% ylim([0 3]);
% ax = gca;
% ax.YAxis.TickValues = [0 1 2 3];
% xlabel('Date','FontSize',12);
% ylabel('R_t','FontSize',12);
% grid on; hold off;